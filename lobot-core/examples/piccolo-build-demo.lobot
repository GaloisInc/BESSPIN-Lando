type ext = {M, A, F, D, C}

-- Definition of all RISC-V ISA instances.
riscv : kind of struct
  with reg_width : {RV32, RV64},
       xlen : int,
       exts : subset ext,
       privs : subset {M, S, U},
       vm : {SVNone, SV32, SV39, SV48}
  where (reg_width = RV32) => (xlen = 32),
        (reg_width = RV64) => (xlen = 64),
        (D in exts) => (F in exts),
        M in privs,
        (S in privs) => (U in privs),
        (S in privs) => (not (vm = SVNone)),
        (not (S in privs)) => (vm = SVNone)

-- Definition of a bluespec build configuration, which contains a riscv.
bluespec_config : kind of struct
  with riscv : riscv,
       sim : {Bluesim, IVerilog, Verilator},
       tv : bool
  where not (riscv.vm = SV48)

-- Abstract type for a simulator (under the hood, a path to the simulator
-- executable).
abstract type simulator

-- Function for building a simulator from a bluespec config. This calls out to
-- bsc by converting the config to a bunch of command-line flags, and returns
-- the path to the generated simulator.
abstract fn build_bluespec : bluespec_config -> simulator

-- Abstract type for a RISC-V binary (under the hood, a path to the binary).
abstract type riscv_program
-- Abstract type for a memory trace (under the hood, a path to the trace
-- output).
abstract type mem_trace

abstract fn run_riscv_program : (simulator, riscv_program) -> mem_trace

compliance_test : kind of struct
  with prog : riscv_program,
       trace : mem_trace

abstract fn get_compliance_test : (riscv, int) -> compliance_test
-- Each RISC-V configuration might have a different number of compliance tests.
abstract fn num_compliance_tests : riscv -> int

-- Test every single RV32 machine-mode bluespec configuration for RISC-V
-- compliance.
piccolo_build_check : check
  for cfg : bluespec_config,
      test_id : int
  where 0 <= test_id, test_id <= num_compliance_tests(cfg.riscv)
  that run_riscv_program( build_bluespec(run.cfg)
                        , get_compliance_test(run.cfg.riscv, run.test_id) )
       = get_compliance_test(run.cfg.riscv, run.test_id).trace
